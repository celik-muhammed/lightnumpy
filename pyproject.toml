# This file is the modern replacement for setup.py, used to configure how your Python package is built.
# 
# https://packaging.python.org/en/latest/discussions/setup-py-deprecated/#setup-py-deprecated
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#a-full-example
# 
# The [build-system] section specifies the build system requirements.
# "setuptools.build_meta" is the default backend used by setuptools for building projects.
# You can add other build dependencies as needed.
#
# https://packaging.python.org/en/latest/specifications/pyproject-toml/
[build-system]
#
# "build-backend" specifies the Python backend to use for building the package.
build-backend = "mesonpy"
requires = [
  # building an env isolated one
  "meson-python>=0.16.0",  # A PEP 517 backend for building Python packages with Meson.
  "meson>=1.5.0",          # The Meson build system itself to coordinate the compilation of code.
  "ninja>=1.11.0",         # The ninja build system used to compile code
  "Cython>=3.0.8",
  "pybind11>=2.13.0",
  # numpy requirement for wheel builds for distribution on PyPI - building
  # against 2.x yields wheels that are also compatible with numpy 1.x at
  # runtime.
  # Note that building against numpy 1.x works fine too - users and
  # redistributors can do this by installing the numpy version they like and
  # disabling build isolation.
  "numpy>=2.0.0",
  # Add other dependencies here if needed
  # "scipy>=1.6.0",
  "pythran>=0.14.0",
]

# The [project] section contains metadata about your project.
[project]
name = "lightnumpy"
dynamic = ["version"]  # The version is determined dynamically, inside meson.build
description = "A lightweight library for array operations with CPU, GPU, and TPU support."

# [project.readme]
# content-type = "text/x-rst"
# The readme file is specified here. This is what users will see on your project's PyPI page.
readme = "README.md"

# [project.license]
# License information is critical. It's recommended to specify the license file.
# license = {text = "BSD-3 Clause License"}
# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
# at that point, no longer include them in `py3.install_sources()`
license = {file = "LICENSE"}

# [[project.authors]]
# List the authors of the project
authors = [
  # {name = "scikit-plots developers", email=""},
]
# [[project.maintainers]]
# Project maintainers
maintainers = [
  {name = "scikit-plots developers", email=""},
]

# Keywords to describe your project, useful for searchability
keywords = [
  "data science",
  "machine learning",
  "numpy",
  "lightnumpy",
]

# Classifiers help users understand the maturity, audience, and compatible environments for your project.
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  'License :: OSI Approved :: BSD License',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  'Programming Language :: C',
  'Programming Language :: C++',
  'Programming Language :: Cython',
  'Programming Language :: Fortran',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.5",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

# Specify the minimum Python version required
requires-python = ">=3.9"

# Replace these with the actual dependencies from requirements.txt
dependencies = [
  # Core dependencies required for the project to run
  "numpy>=1.19.5",
  "scipy>=1.6.0",
]

[project.optional-dependencies]
# Development dependencies (for linting, type checking, and general dev tools)
dev = [
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "mypy>=1.9.0",                            # Type checking
  "pycodestyle",                            # PEP-8 compliance
  "ruff>=0.5.1",                            # Linting
  "cython-lint>=0.12.2",                    # Linting for Cython
  "black>=24.3.0",                          # Code formatting
  "doit>=0.36.0",                           # Task automation
  "typing_extensions",                      # Backports for older Python versions
  "pydevtool",                              # Development tools
  "types-psutil",                           # Type stubs for psutil
  "rich-click",                             # Enhanced CLI
]
# Build dependencies (for packaging and building extensions)
build = [
  "meson-python>=0.16.0",                   # A PEP 517 backend for building Python packages with Meson.
  "meson>=1.5.0",                           # The Meson build system itself to coordinate the compilation of code.
  "ninja>=1.11.0",                          # The ninja build system used to compile code
  "Cython>=3.0.8",                          # Cython bindings for extensions
  "pybind11>=2.13.2",                       # Python bindings
  "numpy>=1.23.5",
  # "scipy>=1.6.0",
  "pythran>=0.14.0",                        # Static Python compiler
  "pandas>=1.5.1",
  "matplotlib>=3.5",
  "build",                                  # Standard Python build tool
  "twine",                                  # Upload to PyPI
]
# Testing dependencies
test = [
  "pytest>=7.1.2",                          # Core testing framework
  "pytest-cov>=2.9.0",                      # Coverage reports
  "pytest-mpl",                             # Matplotlib testing
  "hypothesis>=6.30",                       # Property-based testing
  "matplotlib>=3.5",                        # Plotting for tests
  "pandas>=1.5.1",                          # Data analysis for tests
  "pyarrow>=12.0.0",                        # Arrow format
  "polars>=0.20.30",                        # DataFrame library
  "pyamg>=4.0.0",                           # Algebraic multigrid solvers
  "pooch>=1.6.0",                           # Data downloading
  "scikit-learn>=1.1",                      # Machine learning
  "scikit-image>=0.17.2",                   # Image processing
  "catboost",                               # Gradient boosting
  "tensorflow",                             # Deep learning
]
# Documentation dependencies
doc = [
  "pooch>=1.6.0",                           # Data management
  "packaging>=21",                          # Package utilities
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "jinja2",                                 # Templating engine
  "sphinx>=5.0.0,<8.0.0",                   # Documentation generator
  "sphinx-rtd-theme",                       # ReadTheDocs theme
  "pydata-sphinx-theme",                    # PyData theme
  "sphinx-gallery",                         # Gallery examples
  "sphinx-prompt",                          # Shell prompts
  "sphinxext-opengraph",                    # Social media metadata
  "sphinx-copybutton",                      # Copy button for code blocks
  "sphinxcontrib-sass",                     # SASS support
  "sphinx-design",                          # Modern design elements
  "sphinx-remove-toctrees",                 # Customize toctrees
  "myst-parser",                            # Markdown support
  "myst-nb",                                # Jupyter Notebook integration
  "jupytext",                               # Text-based Notebook formats
  "jupyter-sphinx",                         # Jupyter integration
  "jupyterlite-sphinx",                     # JupyterLite integration
  "jupyterlite-pyodide-kernel",             # Pyodide support
  "intersphinx_registry",                   # Intersphinx management
  "colorspacious",                          # Color management
  "sphinxcontrib-svg2pdfconverter",         # SVG to PDF conversion
  "sphinxcontrib-inlinesyntaxhighlight",    # Inline syntax highlighting
  "sphinx-tabs",                            # Tabbed content
  "sphinx-tags",                            # Tagging support
  "matplotlib>=3.5",                        # Visualization
  "plotly>=5.10",                           # Interactive plotting
  "seaborn>=0.11",                          # Statistical plotting
  "pandas>=1.5",                            # Data analysis
  "polars>=0.20.30",                        # DataFrame library
  "pyarrow>=12.0.0",                        # Arrow format
  "Pillow>=9.1",                            # Image processing
  "scikit-image>=0.17.2",                   # Image processing
  "scikit-learn>=1.1",                      # Machine learning
  "tensorflow>=2.10",                       # Deep learning
]
# Maintenance tools
maintenance = [
  "conda-lock==2.5.6",                      # Dependency lock files for Conda
]
# Specialized dependencies for specific hardware
cpu = [
  "numpy",                                  # CPU-based numerical computing
  "jax",                                    # import jax.numpy as jnp
  # "jaxlib",                                 # import jax.numpy as jnp
]
gpu = [
  # https://jax.readthedocs.io/en/latest/installation.html#installation
  # "jax[cuda] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",             # import jax.numpy as jnp
  # "jax[cuda11_cudnn805] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",  # import jax.numpy as jnp
  # "jax[cuda12]",                          # import jax.numpy as jnp
  "cupy",                                   # GPU-based numerical computing
  "torch",                                  # PyTorch
]
tpu = [
  "tensorflow",                             # TPU-accelerated machine learning
  # JAXlib is a library by DeepMind that provides the low-level bindings for JAX and allows you to perform tensor computations on TPU, GPU, and CPU.
  # https://jax.readthedocs.io/en/latest/installation.html#installation
  # "jax[tpu] -f https://storage.googleapis.com/jax-releases/libtpu_releases.html"
  "jax[tpu]",                               # TPU-accelerated machine learning
  # "dm-haiku",                               # neural network library built on top of JAX by Google Research
  # "flax",                                   # Flax is another JAX-based library but with a more comprehensive set of tools for defining neural networks.
]

# https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
# Links to important pages related to the project
[project.urls]
# homepage (Homepage)
homepage        = "https://scikit-plots.github.io"
# source (Source Code), repository, sourcecode, github
repository      = "https://github.com/scikit-plots/lightnumpy"
# download (Download), equivalent to Download-URL
download        = "https://github.com/scikit-plots/lightnumpy"
# changelog (Changelog), changes, whatsnew, history
# The changelog, really useful for ongoing users of your project
# changelog     = "https://scikit-plots.github.io/dev/whats_new/index.html"
# releasenotes (Release Notes)
# documentation (Documentation), docs
documentation   = "https://scikit-plots.github.io"
# issues (Issue Tracker), "Bug Tracker"
# bugs, issue, tracker, issuetracker, bugtracker
issues          = "https://github.com/scikit-plots/lightnumpy/issues"
# funding (Funding), sponsor, donate, donation
# Donate        = "https://github.com/scikit-plots/lightnumpy#donate"
# Forum         = "https://github.com/scikit-plots/lightnumpy/issues"

# Configuration for the pytest testing framework
[tool.pytest.ini_options]
minversion = "6.0"  # Specify the minimum version of pytest
addopts = "-ra -q"  # Add command-line options
testpaths = [
  "lightnumpy",
]  # Directories where tests are located
# filterwarnings = [
#   "error",
#   'default:.*pyamg, which cannot \(yet\) be imported with NumPy >=2:RuntimeWarning'
# ]

# Black is a code formatter; this section configures its behavior.
[tool.black]
line-length = 100  # Maximum line length 88
target-version = ['py35', 'py310', 'py314']  # Python versions to target
preview = true     # Enable Black's preview features
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | builddir
  | build
  | dist
  | doc/build
  | doc/_build
  | doc/auto_examples
  | lightnumpy/externals
  | asv_benchmarks/env
  | auto_building_tools/
)/
'''

[tool.ruff]
# max line length for black
line-length = 88
target-version = "py38"
exclude=[
  ".git",
  "__pycache__",
  "dist",
  "doc/build",
  "build",
]

[tool.ruff.lint]
# This enables us to use CPY001: copyright header check
preview = true
# This enables us to use the explicit preview rules that we want only
explicit-preview-rules = true
# all rules can be found here: https://beta.ruff.rs/docs/rules/
select = ["E", "F", "W", "I", "CPY001"]
ignore=[
    # space before : (needed for how black formats slicing)
    "E203",
    # do not assign a lambda expression, use a def
    "E731",
    # do not use variables named 'l', 'O', or 'I'
    "E741",
    # E721 is in preview (july 2024) and gives many false positives.
    # Use `is` and `is not` for type comparisons, or `isinstance()` for
    # isinstance checks
    "E721",
    # F841 is in preview (july 2024), and we don't care much about it.
    # Local variable ... is assigned to but never used
    "F841",
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ scikit\\-plots\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ BSD\\-3\\-Clause"

[tool.ruff.lint.per-file-ignores]
# It's fine not to put the import at the top of the file in the examples
# folder.
"galleries/*"=["E402"]
"docs/conf.py"=["E402"]
"docs/*"=["CPY001"]
"**/tests/*"=["CPY001"]
"tools/*"=["CPY001"]
".spin/*"=["CPY001"]
".github/*"=["CPY001"]
# __doc__ is too long (>4096 chars) and therefore false positive on copyright check
# "examples/model_selection/plot_precision_recall.py"=["CPY001"]
# __all__ has un-imported names
# "lightnumpy/__init__.py"=["F822"]

[tool.cython-lint]
# Ignore the same error codes as ruff
# + E501 (line too long) because keeping it < 88 in cython
# often makes code less readable.
ignore = [
    # multiple spaces/tab after comma
    'E24',
    # space before : (needed for how black formats slicing)
    'E203',
    # line too long
    'E501',
    # do not assign a lambda expression, use a def
    'E731',
    # do not use variables named 'l', 'O', or 'I'
    'E741',
    # line break before binary operator
    'W503',
    # line break after binary operator
    'W504',
]